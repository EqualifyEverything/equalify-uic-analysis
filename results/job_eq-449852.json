{"_id": "685ad206eb03a9e478ff523c", "createdDate": "2025-06-24T16:27:50.364Z", "jobID": "eq-449852", "PDFresults": {"report": {"buildInformation": {"releaseDetails": [{"id": "core", "version": "1.28.1", "buildDate": 1745946180000}, {"id": "validation-model", "version": "1.28.1", "buildDate": 1745953500000}, {"id": "gui", "version": "1.28.1", "buildDate": 1748123640000}]}, "jobs": [{"itemDetails": {"name": "/home/pdf-worker/www/dist/scanners/Adult-Learners-March2022.FINAL_.pdf", "size": 389427}, "validationResult": [{"details": {"passedRules": 1715, "failedRules": 9, "passedChecks": 176984, "failedChecks": 75, "tags": ["paragraph", "metadata", "alt-text", "syntax", "text", "list", "structure", "table"], "ruleSummaries": [{"ruleStatus": "FAILED", "specification": "ISO 14289-2:2024", "clause": "8.11.2", "testNumber": 1, "status": "failed", "failedChecks": 1, "tags": ["syntax"], "description": "The ViewerPreferences dictionary of the document catalog dictionary shall be present and shall contain at least the DisplayDocTitle key with a value of true, as described in ISO 32000-2:2020, Table 147", "object": "CosDocument", "test": "DisplayDocTitle == true", "checks": [{"status": "failed", "context": "root", "errorMessage": "ViewerPreferences dictionary is not present in the document Catalog, or DisplayDocTitle key is set to false or is not present in the ViewerPreferences dictionary (ViewerPreferences = null, DisplayDocTitle = null)", "errorArguments": [null, null]}]}, {"ruleStatus": "FAILED", "specification": "ISO 14289-2:2024", "clause": "5", "testNumber": 1, "status": "failed", "failedChecks": 1, "tags": ["metadata"], "description": "The PDF/UA version of a file shall be specified in the value of the Metadata entry in the document catalog using the PDF/UA identification schema", "object": "MainXMPPackage", "test": "containsPDFUAIdentification == true", "checks": [{"status": "failed", "context": "root/document[0]/metadata[0](86 0 obj PDMetadata)/XMPPackage[0]", "errorMessage": "The document metadata stream doesn't contain PDF/UA Identification Schema", "errorArguments": []}]}, {"ruleStatus": "FAILED", "specification": "ISO 32005:2023", "clause": "Table 5. StructTreeRoot-Document", "testNumber": 1, "status": "failed", "failedChecks": 1, "tags": ["structure"], "description": "StructTreeRoot shall contain exactly one <Document>", "object": "PDStructTreeRoot", "test": "kidsStandardTypes.split('&').filter(elem => elem == 'Document').length == 1", "checks": [{"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)", "errorMessage": "StructTreeRoot either doesn't contain or contains more than one <Document>", "errorArguments": []}]}, {"ruleStatus": "FAILED", "specification": "ISO 32005:2023", "clause": "Table 5. StructTreeRoot-Sect", "testNumber": 1, "status": "failed", "failedChecks": 1, "tags": ["structure"], "description": "StructTreeRoot shall not contain <Sect>", "object": "SESect", "test": "parentStandardType != 'StructTreeRoot'", "checks": [{"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)", "errorMessage": "StructTreeRoot contains <Sect>", "errorArguments": []}]}, {"ruleStatus": "FAILED", "specification": "ISO 14289-2:2024", "clause": "8.2.5.2", "testNumber": 1, "status": "failed", "failedChecks": 1, "tags": ["structure"], "description": "The structure tree root shall contain a single Document structure element as its only child, as specified in ISO 32000-2:2020, Annex L and ISO/TS 32005", "object": "PDStructTreeRoot", "test": "kidsStandardTypes == 'Document'", "checks": [{"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)", "errorMessage": "The structure tree root contains Sect element(s) instead of a single Document structure element", "errorArguments": ["Sect"]}]}, {"ruleStatus": "FAILED", "specification": "ISO 14289-2:2024", "clause": "8.4.3", "testNumber": 1, "status": "failed", "failedChecks": 8, "tags": ["alt-text", "text"], "description": "In all cases, where real content maps to Unicode PUA values, an ActualText or Alt entry shall be present", "object": "Glyph", "test": "isRealContent == false || unicodePUA == false || actualTextPresent == true || altPresent == true", "checks": [{"status": "failed", "context": "root/document[0]/pages[21](41 0 obj PDPage)/contentStream[0](42 0 obj PDSemanticContentStream)/operators[46]/usedGlyphs[0](XBNPGY+Wingdings-Regular XBNPGY+Wingdings-Regular 131 0 1896708863 21 true)", "errorMessage": "Real content maps to Unicode PUA values, but ActualText and Alt entry are not present", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/pages[21](41 0 obj PDPage)/contentStream[0](42 0 obj PDSemanticContentStream)/operators[63]/usedGlyphs[0](XBNPGY+Wingdings-Regular XBNPGY+Wingdings-Regular 131 0 807239968 21 true)", "errorMessage": "Real content maps to Unicode PUA values, but ActualText and Alt entry are not present", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/pages[21](41 0 obj PDPage)/contentStream[0](42 0 obj PDSemanticContentStream)/operators[78]/usedGlyphs[0](XBNPGY+Wingdings-Regular XBNPGY+Wingdings-Regular 131 0 1832284192 21 true)", "errorMessage": "Real content maps to Unicode PUA values, but ActualText and Alt entry are not present", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/pages[21](41 0 obj PDPage)/contentStream[0](42 0 obj PDSemanticContentStream)/operators[95]/usedGlyphs[0](XBNPGY+Wingdings-Regular XBNPGY+Wingdings-Regular 131 0 1917161212 21 true)", "errorMessage": "Real content maps to Unicode PUA values, but ActualText and Alt entry are not present", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/pages[21](41 0 obj PDPage)/contentStream[0](42 0 obj PDSemanticContentStream)/operators[110]/usedGlyphs[0](XBNPGY+Wingdings-Regular XBNPGY+Wingdings-Regular 131 0 918307166 21 true)", "errorMessage": "Real content maps to Unicode PUA values, but ActualText and Alt entry are not present", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/pages[21](41 0 obj PDPage)/contentStream[0](42 0 obj PDSemanticContentStream)/operators[147]/usedGlyphs[0](XBNPGY+Wingdings-Regular XBNPGY+Wingdings-Regular 131 0 882706486 21 true)", "errorMessage": "Real content maps to Unicode PUA values, but ActualText and Alt entry are not present", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/pages[21](41 0 obj PDPage)/contentStream[0](42 0 obj PDSemanticContentStream)/operators[175]/usedGlyphs[0](XBNPGY+Wingdings-Regular XBNPGY+Wingdings-Regular 131 0 1785807415 21 true)", "errorMessage": "Real content maps to Unicode PUA values, but ActualText and Alt entry are not present", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/pages[21](41 0 obj PDPage)/contentStream[0](42 0 obj PDSemanticContentStream)/operators[213]/usedGlyphs[0](XBNPGY+Wingdings-Regular XBNPGY+Wingdings-Regular 131 0 1924802798 21 true)", "errorMessage": "Real content maps to Unicode PUA values, but ActualText and Alt entry are not present", "errorArguments": []}]}, {"ruleStatus": "FAILED", "specification": "ISO 32005:2023", "clause": "Table 5. TR-P", "testNumber": 1, "status": "failed", "failedChecks": 50, "tags": ["paragraph", "structure"], "description": "<TR> shall not contain <P>", "object": "SEP", "test": "parentStandardType != 'TR'", "checks": [{"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[40](2460 0 obj SETable Table)/K[0](2462 0 obj SETR TR)/K[0](2385 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[40](2460 0 obj SETable Table)/K[1](2463 0 obj SETR TR)/K[0](2390 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[40](2460 0 obj SETable Table)/K[15](2459 0 obj SETR TR)/K[0](2457 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[49](2350 0 obj SETable Table)/K[0](2352 0 obj SETR TR)/K[0](2332 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[49](2350 0 obj SETable Table)/K[1](2353 0 obj SETR TR)/K[0](2337 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[49](2350 0 obj SETable Table)/K[3](2349 0 obj SETR TR)/K[0](2346 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[53](2268 0 obj SETable Table)/K[0](2270 0 obj SETR TR)/K[0](2073 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[53](2268 0 obj SETable Table)/K[1](2271 0 obj SETR TR)/K[0](2078 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[53](2268 0 obj SETable Table)/K[9](2267 0 obj SETR TR)/K[0](2111 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[58](2186 0 obj SETable Table)/K[0](2188 0 obj SETR TR)/K[0](2120 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[58](2186 0 obj SETable Table)/K[1](2189 0 obj SETR TR)/K[0](2125 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[58](2186 0 obj SETable Table)/K[15](2185 0 obj SETR TR)/K[0](2182 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[64](1920 0 obj SETable Table)/K[0](1922 0 obj SETR TR)/K[0](1792 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[64](1920 0 obj SETable Table)/K[1](1923 0 obj SETR TR)/K[0](1797 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[64](1920 0 obj SETable Table)/K[24](1919 0 obj SETR TR)/K[0](1910 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[74](1708 0 obj SETable Table)/K[0](1710 0 obj SETR TR)/K[0](1496 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[74](1708 0 obj SETable Table)/K[1](1711 0 obj SETR TR)/K[0](1501 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[74](1708 0 obj SETable Table)/K[12](1707 0 obj SETR TR)/K[0](1554 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[79](1630 0 obj SETable Table)/K[0](1632 0 obj SETR TR)/K[0](1566 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[79](1630 0 obj SETable Table)/K[1](1633 0 obj SETR TR)/K[0](1571 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[79](1630 0 obj SETable Table)/K[12](1629 0 obj SETR TR)/K[0](1626 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[83](1448 0 obj SETable Table)/K[0](1450 0 obj SETR TR)/K[0](1411 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[83](1448 0 obj SETable Table)/K[1](1451 0 obj SETR TR)/K[0](1416 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[83](1448 0 obj SETable Table)/K[6](1447 0 obj SETR TR)/K[0](1441 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[89](1161 0 obj SETable Table)/K[0](1163 0 obj SETR TR)/K[0](1387 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[89](1161 0 obj SETable Table)/K[1](1164 0 obj SETR TR)/K[0](1378 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[89](1161 0 obj SETable Table)/K[18](1181 0 obj SETR TR)/K[0](1211 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[89](1161 0 obj SETable Table)/K[19](1182 0 obj SETR TR)/K[0](975 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[89](1161 0 obj SETable Table)/K[24](1160 0 obj SETR TR)/K[0](1001 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[95](1079 0 obj SETable Table)/K[0](1081 0 obj SETR TR)/K[0](1012 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[95](1079 0 obj SETable Table)/K[1](1082 0 obj SETR TR)/K[0](1017 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[95](1079 0 obj SETable Table)/K[2](1083 0 obj SETR TR)/K[0](1022 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[95](1079 0 obj SETable Table)/K[15](1078 0 obj SETR TR)/K[0](1075 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[102](940 0 obj SETable Table)/K[0](942 0 obj SETR TR)/K[0](905 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[102](940 0 obj SETable Table)/K[1](943 0 obj SETR TR)/K[0](910 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[102](940 0 obj SETable Table)/K[5](939 0 obj SETR TR)/K[0](927 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[115](854 0 obj SETable Table)/K[0](856 0 obj SETR TR)/K[0](817 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[115](854 0 obj SETable Table)/K[1](857 0 obj SETR TR)/K[0](822 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[115](854 0 obj SETable Table)/K[7](853 0 obj SETR TR)/K[0](847 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[121](526 0 obj SETable Table)/K[0](528 0 obj SETR TR)/K[0](793 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[121](526 0 obj SETable Table)/K[1](529 0 obj SETR TR)/K[0](784 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[121](526 0 obj SETable Table)/K[12](540 0 obj SETR TR)/K[0](675 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[121](526 0 obj SETable Table)/K[13](541 0 obj SETR TR)/K[0](404 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[121](526 0 obj SETable Table)/K[36](525 0 obj SETR TR)/K[0](517 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[130](386 0 obj SETable Table)/K[0](388 0 obj SETR TR)/K[0](299 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[130](386 0 obj SETable Table)/K[1](389 0 obj SETR TR)/K[0](302 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[130](386 0 obj SETable Table)/K[3](385 0 obj SETR TR)/K[0](307 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[133](347 0 obj SETable Table)/K[0](349 0 obj SETR TR)/K[0](314 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[133](347 0 obj SETable Table)/K[1](350 0 obj SETR TR)/K[0](318 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[133](347 0 obj SETable Table)/K[11](346 0 obj SETR TR)/K[0](339 0 obj SEP Artifact)", "errorMessage": "<TR> contains <P>", "errorArguments": []}]}, {"ruleStatus": "FAILED", "specification": "ISO 14289-2:2024", "clause": "8.2.5.26", "testNumber": 4, "status": "failed", "failedChecks": 11, "tags": ["structure", "table"], "description": "Tables shall be regular. Table rows shall have the same number of columns (taking into account column spans)", "object": "SETable", "test": "numberOfRowWithWrongColumnSpan == null || wrongColumnSpan == null", "checks": [{"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[40](2460 0 obj SETable Table)", "errorMessage": "Table rows 1 and 2 span different number of columns (5 and 4 respectively)", "errorArguments": ["2", "5", "4"]}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[49](2350 0 obj SETable Table)", "errorMessage": "Table rows 1 and 2 span different number of columns (5 and 4 respectively)", "errorArguments": ["2", "5", "4"]}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[64](1920 0 obj SETable Table)", "errorMessage": "Table rows 1 and 2 span different number of columns (5 and 4 respectively)", "errorArguments": ["2", "5", "4"]}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[74](1708 0 obj SETable Table)", "errorMessage": "Table rows 1 and 2 span different number of columns (5 and 4 respectively)", "errorArguments": ["2", "5", "4"]}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[79](1630 0 obj SETable Table)", "errorMessage": "Table rows 1 and 2 span different number of columns (5 and 4 respectively)", "errorArguments": ["2", "5", "4"]}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[83](1448 0 obj SETable Table)", "errorMessage": "Table rows 1 and 2 span different number of columns (5 and 4 respectively)", "errorArguments": ["2", "5", "4"]}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[89](1161 0 obj SETable Table)", "errorMessage": "Table rows 1 and 2 span different number of columns (5 and 4 respectively)", "errorArguments": ["2", "5", "4"]}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[115](854 0 obj SETable Table)", "errorMessage": "Table rows 1 and 2 span different number of columns (5 and 4 respectively)", "errorArguments": ["2", "5", "4"]}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[121](526 0 obj SETable Table)", "errorMessage": "Table rows 1 and 2 span different number of columns (5 and 4 respectively)", "errorArguments": ["2", "5", "4"]}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[130](386 0 obj SETable Table)", "errorMessage": "Table rows 1 and 2 span different number of columns (3 and 2 respectively)", "errorArguments": ["2", "3", "2"]}, {"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[133](347 0 obj SETable Table)", "errorMessage": "Table rows 1 and 2 span different number of columns (3 and 2 respectively)", "errorArguments": ["2", "3", "2"]}]}, {"ruleStatus": "FAILED", "specification": "ISO 32005:2023", "clause": "Table 5. L-LBody", "testNumber": 1, "status": "failed", "failedChecks": 1, "tags": ["list", "structure"], "description": "<L> shall not contain <LBody>", "object": "SELBody", "test": "parentStandardType != 'L'", "checks": [{"status": "failed", "context": "root/document[0]/StructTreeRoot[0](110 0 obj PDStructTreeRoot)/K[0](111 0 obj SESect Sect)/K[189](166 0 obj SEL L)/K[5](165 0 obj SELI LI)/K[0](164 0 obj SELBody LBody)/K[0](163 0 obj SEL L)/K[1](136 0 obj SELBody LBody)", "errorMessage": "<L> contains <LBody>", "errorArguments": []}]}]}, "jobEndStatus": "normal", "profileName": "PDF/UA-2 + Tagged PDF validation profile", "statement": "PDF file is not compliant with Validation Profile requirements.", "compliant": false}], "processingTime": {"start": 1750782464867, "finish": 1750782470222, "duration": "00:00:05.355", "difference": 5355}}], "batchSummary": {"duration": {"start": 1750782464661, "finish": 1750782470319, "duration": "00:00:05.658", "difference": 5658}, "totalJobs": 1, "outOfMemory": 0, "veraExceptions": 0, "failedEncryptedJobs": 0, "failedParsingJobs": 0, "validationSummary": {"nonCompliantPdfaCount": 1, "compliantPdfaCount": 0, "failedJobCount": 0, "totalJobCount": 1, "successfulJobCount": 1}, "featuresSummary": {"failedJobCount": 0, "totalJobCount": 0, "successfulJobCount": 0}, "repairSummary": {"failedJobCount": 0, "totalJobCount": 0, "successfulJobCount": 0}, "multiJob": false}}}}